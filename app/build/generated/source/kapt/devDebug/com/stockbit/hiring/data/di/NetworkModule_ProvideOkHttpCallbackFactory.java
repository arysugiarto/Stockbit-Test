// Generated by Dagger (https://dagger.dev).
package com.stockbit.hiring.data.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpCallbackFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  private final Provider<Cache> cacheProvider;

  public NetworkModule_ProvideOkHttpCallbackFactory(
      Provider<HttpLoggingInterceptor> interceptorProvider, Provider<Cache> cacheProvider) {
    this.interceptorProvider = interceptorProvider;
    this.cacheProvider = cacheProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpCallback(interceptorProvider.get(), cacheProvider.get());
  }

  public static NetworkModule_ProvideOkHttpCallbackFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider, Provider<Cache> cacheProvider) {
    return new NetworkModule_ProvideOkHttpCallbackFactory(interceptorProvider, cacheProvider);
  }

  public static OkHttpClient provideOkHttpCallback(HttpLoggingInterceptor interceptor,
      Cache cache) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttpCallback(interceptor, cache));
  }
}
