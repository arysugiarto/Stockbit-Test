// Generated by Dagger (https://dagger.dev).
package com.stockbit.hiring.data.di;

import android.content.Context;
import com.stockbit.hiring.data.local.preferences.AccessManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideAccessManagerFactory implements Factory<AccessManager> {
  private final Provider<Context> contextProvider;

  public ApplicationModule_ProvideAccessManagerFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public AccessManager get() {
    return provideAccessManager(contextProvider.get());
  }

  public static ApplicationModule_ProvideAccessManagerFactory create(
      Provider<Context> contextProvider) {
    return new ApplicationModule_ProvideAccessManagerFactory(contextProvider);
  }

  public static AccessManager provideAccessManager(Context context) {
    return Preconditions.checkNotNullFromProvides(ApplicationModule.INSTANCE.provideAccessManager(context));
  }
}
